<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        ">



	<!-- Subject工厂 -->
	<!-- 
	<bean id="subjectFactory"
		class=" com.dreamliner.secretchat.secure.StatelessDefaultSubjectFactory" /> -->



	<!-- Realm实现 -->
	<bean id="statelessRealm" class="com.left.jc.secure.realm.StatelessRealm">
		<property name="cachingEnabled" value="false" />
	</bean>




	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
		<property name="sessionValidationSchedulerEnabled" value="false" />
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="statelessRealm" />
		<property name="subjectDAO.sessionStorageEvaluator.sessionStorageEnabled"
			value="false" />
		<!-- <property name="subjectFactory" ref="subjectFactory" /> -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<!-- <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> 
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" 
		/> <property name="arguments" ref="securityManager" /> </bean> -->

	<!-- restNossion过滤器 -->
	<bean id="restNosession"
		class="com.left.jc.secure.filter.NoSesstionHttpMethodPermissionFilter" />

	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login" />
		<!-- 登录成功后要跳转的连接-->
		<property name="successUrl" value="/maps/main.html"></property>
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/unauthorized"></property>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filters">
			<map>

				<!-- 将重写的rest覆盖系统rest -->
				<entry key="rest" value-ref="restNosession" />
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				<!--/users/**=noSessionCreation,rest-->
				/login.jsp**=anon
				/users/**=authc
			</value>
		</property>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
	<!-- 此处注释掉这两个bean(将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
      <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
      </bean>
    -->
</beans>